name: "Build, test, pack, and release to NuGet"

on:
  push:
    branches: [ "main"]

jobs:
  checkout:
    runs-on: ubuntu-latest

    steps:
    - name: "Checkout source"
      id: checkout
      uses: actions/checkout@v3

  build:
    runs-on: ubuntu-latest
    needs: checkout

    steps:
    - name: Setup .NET
      id: setup
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.x
    - name: Restore dependencies
      id: restore
      with:
        working-directory: ./src/
      run: dotnet restore
    - name: Build
      id: build
      with:
        working-directory: ./src/
      run: dotnet build --no-restore

  test:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Test
      id: test
      with:
        working-directory: ./src/
      run: dotnet test --no-build --verbosity normal

  release:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Build solution and generate NuGet package
      id: package-build
      with:
        working-directory: ./src/
      run: |  
        cd ./src/
        dotnet pack -c Release -o out

    - name: NuGet push
      id: nuget-push
      uses: edumserrano/nuget-push@v1.2.2
      with:
        api-key: ${{ secrets.NUGET_API_KEY }}
        working-directory: ./src/out/
        nuget-package: '*.nupkg'
        symbols-package: '*.snupkg'

    - name: Log output
      id: log-output
      if: steps.nuget-push.conclusion != 'skipped' && always() # run regardless if the previous step failed or not, just as long as it wasn't skipped
      shell: pwsh
      run: |
        $pushResult = '${{ steps.nuget-push.outputs.push-result }}' | ConvertFrom-Json
        $pushResultAsJsonIndented = ConvertTo-Json $pushResult
        Write-Output $pushResultAsJsonIndented  # outputs the result of the nuget push operation as an indented JSON string
        Write-Output '${{ steps.nuget-push.outputs.status }}' # outputs the overall status of the nuget push action

        # since we only pushed one package/symbols there's no need to iterate the packages list
        # there will only be one element in the array
        $package = $pushResult.packages[0]
        Write-Output "$($package.status)"  # outputs the status of the nuget push operation
        Write-Output "$($package.package)" # outputs the NuGet package name that was pushed
        Write-Output "$($package.symbols)" # outputs the symbols package name that was pushed